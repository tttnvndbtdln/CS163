#include "Program_4.h"

using namespace std;

//Phuong Pham
//CS 163
//Program 4
//May 2016

//The purpose of this program is to build a "study guide" consisting of information about certain 
//topics in a certain class. Information along with the topic include the topic's title, a description
//that the user knows about the topic, the chapter number that the topic is located in the
//textbook, the starting page of the material, the ending page of the topic, and a flag to indicate
//whether further study is needed on the material. This study guide is entirely generated by the 
//user. That is, all information on this study guide must come from the user. The user may then 
//perform a number of actions about the study guide, including adding new topics to the study 
//guide, removing a topic from the study guide (along with all of its relevant information), edit
//the description of the study guide as the student progresses in his/her studying, retrieve 
//information about a certain topic (then display if the main application would like to do so),
//displaying all topics whose first letter is within a range of letters provided by the user
//(e.g. display all topics whose words' first letter are within the range of A through M), and
//displaying all topics in the study guide. 

//This program is implemented using a table abstract data type using a binary search tree as 
//the data structure to store the information about each topic in the study guide. This gives 
//us the advantage of a logarithmic algorithm for insert, remove, and retrieve, which are
//usually the operations for working with a study guide. It also provides us with the flexibility
//of displaying the data in sorted order and the ability to display the data in a range. 

//A struct is first used to store all of the information about the topic, including two pointers to
//point to the two children of the parent's node. A class is established with all of the operations
//the user can perform in its public sections and the root pointer to the tree is placed under the
//private section. Furthermore, in order to maintain the integrity of the data stored, no node
//pointers should exist (pass in to the functions from main) and so the functions in the public
//sections will simply call the private functions. The private functions are the ones that actually
//perform the operations recursively, since it needs to be passed in the node pointer to do so.  

int main()
{
	table study_guide; //Create an instance of class table called study_guide
	
	node found; //Create instance of node found to store information retrieved
	
	char key_word[100]; //Store keyword/topic.
	char topic_description[300]; //Store description.
	int chap = 0, low_page = 0, high_page =0; //Store chapter number, starting page, and ending page.
	char study, start_range, end_range; //Flag if further study is needed; characters to store the ends
													  //of the range wished to display topics
	int response = 0; //Hold response for options.
	char response2 = 'N'; //Hold response for repeat.
	
	//Welcome
	cout << "\n\nGreetings. In this application, a user may create a study guide consisting of information" << endl
		   << "\tincluding the title of the topic, a description of that topic, the chapter number the topic is," << endl
		   << "\tthe page the material starts on, the page it ends on, and an indicator of whether or not" << endl
		   << "\tfurther study is needed on the topic. Upon entering these data to generate the study guide," << endl
		   << "\tthe user can also remove a topic from the study guide (along with all of its information), edit" << endl
		   << "\tthe description of a topic (by adding more information as studying progresses), retrieve" << endl
		   << "\tinformation about a particular topic, display all topics starting from a certain letter to another," << endl
		   << "\tand display all topics in the study guide." << endl;
	
	do
	{
		cout << "\n\nWhat would you like to do?" << endl;
		cout << "Enter 1 to insert a new topic." << endl;
		cout << "Enter 2 to remove a topic." << endl;
		cout << "Enter 3 to edit the description of a topic." << endl;
		cout << "Enter 4 to retrieve a topic from the study guide." << endl;
		cout << "Enter 5 to display all topics in a certain alphebetical range." << endl;
		cout << "Enter 6 to display all topics in the study guide." << endl;
		cout << "Enter 7 to quit application." << endl;
		cin >> response;
		cin.ignore(100, '\n');
		
		if (response == 1)
		{
			cout << "\nEnter title of topic: ";
			cin.get(key_word, 100);
			cin.ignore(100, '\n');
			
			cout << "Enter description of topic: ";
			cin.get(topic_description, 300);
			cin.ignore(300, '\n');
			
			cout << "Enter chapter topic is located in textbook: ";
			cin >> chap;
			cin.ignore(100, '\n');
			
			cout << "Enter starting page of the material: ";
			cin >> low_page;
			cin.ignore(100, '\n');
			
			cout << "Enter ending page of the material: ";
			cin >> high_page;
			cin.ignore(100, '\n');
			
			cout << "Is further study needed on the topic (Y/N)? ";
			cin >> study;
			cin.ignore(100, '\n');

			if (study_guide.insert(key_word, topic_description, chap, low_page, high_page, study))
				cout << "\nTopic added." << endl;
			else
				cout << "\nTopic could not be added." << endl;
		}
		
		if (response == 2)
		{
			cout << "\nEnter title of topic to be removed: ";
			cin.get(key_word, 100);
			cin.ignore(100, '\n');
			
			if (study_guide.remove(key_word))
				cout << "\nTopic was removed." << endl;
			else
				cout << "\nTopic could not be removed." << endl;
		}
		
		if (response == 3)
		{
			cout << "\nEnter title of topic to edit: ";
			cin.get(key_word, 100);
			cin.ignore(100, '\n');
			
			cout << "\nEnter new description to add: ";
			cin.get(topic_description, 300);
			cin.ignore(300, '\n');
			
			if (study_guide.edit(key_word, topic_description))
				cout << "Edit successful." << endl;
			else
				cout << "Could not edit." << endl;
		}
		
		if (response == 4)
		{
			cout << "\nEnter topic title to retrieve: ";
			cin.get(key_word, 100);
			cin.ignore(100, '\n');
			
			if (study_guide.retrieve(found, key_word))
				cout << "\nRetrieve successful." << endl;
			else
				cout << "\nCould not retrieve." << endl;
			
			cout << "\nWould you like to display found information (Y/N)? ";
			cin >> response2;
			cin.ignore(100, '\n');
			
			if (toupper(response2) == 'Y')
			{
				cout << "\nFound: " << endl;
				cout << "\nTopic: " << found.keyword << endl;
				cout << "Description: " << found.description << endl;
				cout << "Chapter: " << found.chapter << endl;
				cout << "Start page: " << found.start_page << endl;
				cout << "End page: " << found.end_page << endl;
				cout << "Need further study? " << found.flag << endl;
			}
			
			delete [] found.keyword; //Release dynamic memory once done.
			delete [] found.description;
		}
		
		if (response == 5)
		{
			cout << "\nEnter start of range to display: ";
			cin >> start_range;
			cin.ignore(100, '\n');
			
			cout << "\nEnter end of range to display: ";
			cin >> end_range;
			cin.ignore(100, '\n');
			
			study_guide.display_range(start_range, end_range);
		}
		
		if (response == 6)
			study_guide.display_all();
		
	} while (response != 7); 
	
	return 0;
}